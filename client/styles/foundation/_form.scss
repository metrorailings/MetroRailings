/* ----------------------- IMPORTS ----------------------------- */

@import '../foundation/colors';
@import '../foundation/footer';
@import '../foundation/fonts';
@import '../foundation/animations';
@import '../foundation/responsive';

/* ----------------------- MIX-INS ----------------------------- */

/**
 * A mix-in designed to style the placeholder. This mix-in is designed to allow us to apply generic
 * styling to placeholder text across different browsers
 *
 * @author kinsho
 */
@mixin stylePlaceholder()
{
	&::-moz-placeholder
	{
		@content;
	}

	&:-ms-input-placeholder
	{
		@content;
	}

	&::-webkit-input-placeholder
	{
		@content;
	}
}

/**
 * A mix-in designed to style most buttons across the application
 *
 * @author kinsho
 */
@mixin button($bgColor)
{
	@extend %buttonText;
	@include transitionSettings($property: all, $duration: 0.25s);

	border:
	{
		radius: 15px;
		width: 1px;
		style: solid;
		color: map-get($COLORS, darkGrayTheme);
	}

	width: 100%;

	padding: 10px;
	top: 0px;

	cursor: pointer;

	background-color: map-get($COLORS, $bgColor);
	box-shadow: 0px 5px 10px map-get($COLORS, blackTheme);
	opacity: 1.0;

	&:active
	{
		top: 5px;
		box-shadow: 0px 3px 3px map-get($COLORS, blackTheme);
	}

	&.disabled
	{
		cursor: default;
		opacity: 0.4;
	}
}

/**
 * A mix-in designed to style square buttons in the application
 *
 * @author kinsho
 */
@mixin squareButton($bgColor)
{
	@extend %smallButtonText;
	@include transitionSettings($property: all, $duration: 0.25s);

	border:
	{
		width: 1px;
		style: solid;
		color: map-get($COLORS, darkGrayTheme);
	}

	width: 100%;

	padding: 7.5px;
	top: 0px;

	cursor: pointer;

	background-color: map-get($COLORS, $bgColor);
	box-shadow: 0px 6px 8px map-get($COLORS, blackTheme);
	opacity: 1.0;

	&:active
	{
		top: 5px;
		box-shadow: 0px 3px 3px map-get($COLORS, blackTheme);
	}
}

/* ----------------------- FORM STYLES ----------------------------- */

.formRow
{
	@include desktopOnly()
	{
		margin:
		{
			top: 25px;
			bottom: 25px;
		}

		display: flex;
	}
}

.controlGrouping
{
	margin:
	{
		left: 10px;
		right: 10px;
	}

	display: flex;
	justify-content: flex-start;

	@include mobileOnly()
	{
		margin:
		{
			top: 15px;
			bottom: 15px;
		}

		flex-direction: column;
	}

	& > label
	{
		@extend %formLabelText;

		text-align: left;
		white-space: nowrap;

		@include desktopOnly()
		{
			margin-right: 10px;
		}

		@include mobileOnly()
		{
			margin-bottom: 10px;
			width: 100%;
		}

		&.required::after
		{
			content: '*';

			margin-left: 3px;
		}
	}
}

.controlGroupingRow
{
	display: flex;
	flex-direction: row;
}

.formDescriptiveText
{
	@extend %formDescriptiveText;

	text-align: left;

	@include phoneOnly()
	{
		margin:
		{
			top: 10px;
			left: 10px;
			right: 10px;
		}

		width: 100%;
	}
}

.requiredWarning
{
	@extend %italicizedFormDescriptiveText;

	font-style: italic;

	margin:
	{
		top: 30px;
		left: auto;
		right: auto;
	}

	width: 95%;

	text-align: left;
}

/* ----------------------- INPUT STYLES ----------------------------- */

input[type=tel], input[type=text], input[type=email], input[type=password], textarea
{
	@extend %regularText;
	@include stylePlaceholder()
	{
		color: map-get($COLORS, darkGrayTheme);
	}

	padding-left: 3px;
	margin-right: 8px;

	box-shadow: 2px 2px 4px -1px map-get($COLORS, grayTheme);
	height: 1.3em;

	&.error
	{
		background-color: map-get($COLORS, lightRedTheme);
		border-color: map-get($COLORS, darkRedTheme);
	}
}

// Hide all file inputs from view, as the browser's native file input control looks ugly and
// should be replaced
input[type=file]
{
	display: none;
}

// Specialized input container meant to seemingly stow icons inside form fields
.inputTextIcon
{
	border:
	{
		width: 3px;
		style: inset;
		radius: 0px;
		color: map-get($COLORS, lighterGrayTheme);
	}

	padding: 3px;
	display: inline-block;

	& > input[type=text]
	{
		border: none;
		box-shadow: none;

		&:focus
		{
			outline: none;
		}
	}

	& > i
	{
		margin:
		{
			left: 5px;
			right: 5px;
		}

		color: map-get($COLORS, grayTheme);
		cursor: pointer;
	}
}

input[type=checkbox]
{
	display: none;
	width: 0px;

	& + label
	{
		width: 32px;

		&::before
		{
			@extend %significantText;

			content: '\2713 ';

			border:
			{
				width: 1px;
				radius: 5px;
				style: solid;
				color: map-get($COLORS, darkGrayTheme);
			}

			margin-top: 0px;

			display: inline-block;
			width: 32px;
			height: 32px;

			background: map-get($COLORS, lightWhiteTheme);
			box-shadow: inset 0 1px 3px rgba(0,0,0,.3);

			font-size: 32px;
			line-height: 32px;
			color: map-get($COLORS, lightWhiteTheme);

			cursor: pointer;
		}
	}

	&:checked + label::before
	{
		color: map-get($COLORS, darkGreenTheme);
	}
}

// Specialized mobile styling for checkboxes within a control group
.checkboxGrouping
{
	@include phoneOnly()
	{
		display: flex;
		justify-content: center;
		align-items: center;
		flex-direction: row;

		// Specialized styling for the actual checkbox labels
		& > label
		{
			width: auto;

			margin-right: 15px;
		}
	}
}

// We are wrapping all generic radio buttons in containers so as to differentiate these radio buttons from the ones
// we use for buttonSet inputs
.regularRadioInput > input[type=radio]
{
	display: none;

	& + label
	{
		cursor: pointer;

		&::before
		{
			@include transitionSettings($property: background, $duration: 0.25s);
			@include shiftTransition($y: 25%);
			@extend %significantText;

			content: '';

			border:
			{
				radius: 50%;

				width: 5px;
				style: solid;
				color: map-get($COLORS, grayTheme);
			}

			margin-right: 10px;

			width: 24px;
			height: 24px;
			display: inline-block;

			position: relative;

			background-color: map-get($COLORS, lightWhiteTheme);

			cursor: pointer;
		}
	}

	&:checked + label::before
	{
		background: map-get($COLORS, greenTheme);
	}
}

select
{
	@extend %regularText;

	@include desktopOnly()
	{
		box-shadow: 2px 2px 4px -1px map-get($COLORS, lightGrayTheme);
	}

	& > option:disabled
	{
		opacity: 0.6;
	}
}

textarea
{
	@extend %regularText;

	box-shadow: 2px 2px 4px -1px map-get($COLORS, grayTheme);
}

// Generic disabled look
input, select, textarea
{
	&:disabled
	{
		opacity: 0.4;
	}
}

// Styling for customized button sets
.buttonSet
{
	& > label
	{
		@include transitionSettings($property: all, $duration: 0.5s);
		@extend %formDescriptiveText;

		border:
		{
			width: 1px;
			style: solid;
			color: map-get($COLORS, blackTheme);
		}

		padding: 10px;

		cursor: pointer;

		background-color: map-get($COLORS, lightGrayTheme);
		color: map-get($COLORS, blackTheme);

		&:first-of-type
		{
			border-top-left-radius: 10px;
			border-bottom-left-radius: 10px;
		}

		&:last-of-type
		{
			border-top-right-radius: 10px;
			border-bottom-right-radius: 10px;
		}
	}

	& > input
	{
		display: none;

		&:checked + label
		{
			background-color: map-get($COLORS, darkerGrayTheme);
			color: map-get($COLORS, whiteTheme);
		}

		&.yesRadio:checked + label
		{
			background-color: map-get($COLORS, redTheme);
		}

		&.noRadio:checked + label
		{
			background-color: map-get($COLORS, darkGreenTheme);
		}

		&:disabled + label
		{
			cursor: default;
		}
	}
}